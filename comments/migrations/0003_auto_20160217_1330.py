# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-02-17 13:30
from __future__ import unicode_literals

from actstream import action
from actstream.models import Action
from django.db import migrations


class Migration(migrations.Migration):

    def regenerate_actions(apps, schema_editor):
        DivesiteComment = apps.get_model('comments', 'DivesiteComment')
        SlipwayComment = apps.get_model('comments', 'SlipwayComment')
        CompressorComment = apps.get_model('comments', 'CompressorComment')

        for comment in DivesiteComment.objects.all():
            if not Action.objects.filter(action_object_object_id=comment.id).exists():
                Action.objects.create(actor=comment.owner, verb='commented',
                        action_object=comment, target=comment.divesite)
            for action in Action.objects.filter(action_object_object_id=str(comment.id)):
                if action.target is None:
                    action.target = comment.divesite
                    action.save()

        for comment in SlipwayComment.objects.all():
            if not Action.objects.filter(action_object_object_id=comment.id).exists():
                Action.objects.create(actor=comment.owner, verb='commented',
                        action_object=comment, target=comment.slipway)
            for action in Action.objects.filter(action_object_object_id=str(comment.id)):
                if action.target is None:
                    action.target = comment.slipway
                    action.save()

        for comment in CompressorComment.objects.all():
            if not Action.objects.filter(action_object_object_id=comment.id).exists():
                Action.objects.create(actor=comment.owner, verb='commented',
                        action_object=comment, target=comment.compressor)
            for action in Action.objects.filter(action_object_object_id=str(comment.id)):
                if action.target is None:
                    action.target = comment.compressor
                    action.save()

    def rollback(apps, schema_editor):
        DivesiteComment = apps.get_model('comments', 'DivesiteComment')
        SlipwayComment = apps.get_model('comments', 'SlipwayComment')
        CompressorComment = apps.get_model('comments', 'CompressorComment')

        for comment in DivesiteComment.objects.all():
            Action.objects.filter(action_object_object_id=str(comment.id)).delete()
        for comment in CompressorComment.objects.all():
            Action.objects.filter(action_object_object_id=str(comment.id)).delete()
        for comment in SlipwayComment.objects.all():
            Action.objects.filter(action_object_object_id=str(comment.id)).delete()

    dependencies = [
        ('comments', '0002_comment_creation_date'),
    ]

    operations = [
            migrations.RunPython(regenerate_actions, rollback)
    ]
